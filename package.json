{
  "private": true,
  "name": "ecl",
  "version": "2.28.2",
  "publisher": "hpcc-systems",
  "displayName": "ECL Language",
  "description": "ECL (Enterprise Control Language) support for Visual Studio Code",
  "icon": "resources/hpcc-icon.png",
  "categories": [
    "Programming Languages",
    "Snippets",
    "Linters",
    "Debuggers"
  ],
  "main": "./dist/extension.js",
  "browser": "./dist/web-extension",
  "scripts": {
    "clean": "rimraf --glob out lib* dist* types hpcc-systems.ecl.vsix",
    "gen-grammar": "run-script-os",
    "gen-grammar:linux": "./scripts/grammar-generate.sh",
    "gen-grammar:win32": "wsl -e ./scripts/grammar-generate.sh",
    "gen-docs-vecdb": "run-script-os",
    "gen-docs-vecdb:linux": "./dist-util/index-docs.mjs",
    "gen-docs-vecdb:win32": "wsl -e node ./dist-util/index-docs.mjs",
    "gen-nls": "node ./lib-util/generate.js",
    "merge-nls": "node ./lib-util/merge.js",
    "gen-node-types": "tsc --project tsconfig.json --emitDeclarationOnly",
    "gen-node-watch": "npm run gen-node-types -- -w",
    "gen-webview-types": "tsc --project tsconfig.webview.json --emitDeclarationOnly",
    "gen-webview-watch": "npm run gen-webview-types -- -w",
    "gen-types": "run-p gen-node-types gen-webview-types",
    "build-ts": "node esbuild.mjs --production",
    "build-ts-dev": "node esbuild.mjs --development",
    "build-ts-watch": "node esbuild.mjs --watch --development",
    "build": "run-p gen-types build-ts",
    "watch": "run-p gen-types-watch build-ts-watch",
    "lint": "eslint ./src",
    "lint-fix": "npm run lint -- --fix",
    "test": "npm run build",
    "standard-version": "standard-version",
    "vscode:prepublish": "run-s clean build",
    "git-push": "git push --follow-tags upstream trunk",
    "git-push-origin": "git push --follow-tags origin trunk",
    "vsce-publish": "vsce publish",
    "vsce-publish-pre-release": "vsce publish --pre-release",
    "vsce-package": "vsce package -o ./hpcc-systems.ecl.vsix",
    "rm-hpcc": "rimraf ./node_modules/@hpcc-js",
    "tag": "run-s standard-version git-push",
    "tag-pre-release": "run-s standard-version git-push vsce-publish-pre-release",
    "update-major": "npx npm-check-updates -u",
    "update": "npx npm-check-updates -u -t minor"
  },
  "dependencies": {
    "@vscode/prompt-tsx": "0.2.8-alpha",
    "exceljs": "4.4.0",
    "html-to-text": "9.0.5"
  },
  "devDependencies": {
    "@eslint/js": "9.9.1",
    "@fluentui/react": "8.120.7",
    "@hpcc-js/common": "2.72.0",
    "@hpcc-js/comms": "2.95.0",
    "@hpcc-js/ddl-shim": "2.21.0",
    "@hpcc-js/dgrid2": "2.4.0",
    "@hpcc-js/esbuild-plugins": "1.1.2",
    "@hpcc-js/loader": "2.106.7",
    "@hpcc-js/marshaller": "2.26.4",
    "@hpcc-js/observable-shim": "2.6.0",
    "@hpcc-js/observablehq-compiler": "1.3.0",
    "@hpcc-js/util": "2.52.0",
    "@hpcc-js/wasm-expat": "1.3.0",
    "@hpcc-js/wasm-llama": "1.0.0",
    "@hpcc-js/wasm-zstd": "1.2.0",
    "@langchain/community": "0.2.32",
    "@langchain/core": "0.2.31",
    "@langchain/ollama": "0.0.4",
    "@observablehq/inspector": "5.0.1",
    "@observablehq/parser": "6.1.0",
    "@observablehq/runtime": "5.9.9",
    "@observablehq/stdlib": "5.8.8",
    "@octokit/rest": "21.0.2",
    "@types/mocha": "10.0.7",
    "@types/node": "20.16.5",
    "@types/react": "17.0.80",
    "@types/react-dom": "17.0.25",
    "@types/tmp": "0.2.6",
    "@types/vscode": "1.92.0",
    "@types/vscode-notebook-renderer": "1.72.3",
    "@typescript-eslint/eslint-plugin": "8.4.0",
    "@typescript-eslint/parser": "8.4.0",
    "@vscode/debugadapter": "1.67.0",
    "@vscode/debugprotocol": "1.67.0",
    "@vscode/extension-telemetry": "0.9.7",
    "@vscode/vsce": "3.1.0",
    "adm-zip": "0.5.16",
    "antlr4": "4.13.2",
    "assert": "2.1.0",
    "copy-to-clipboard": "3.3.3",
    "copyfiles": "2.4.1",
    "csv-writer": "1.6.0",
    "diff": "5.2.0",
    "esbuild": "0.23.1",
    "esbuild-copy-static-files": "0.1.0",
    "esbuild-plugin-text-replace": "1.3.0",
    "esbuild-plugin-umd-wrapper": "3.0.0",
    "eslint": "8.57.0",
    "eslint-plugin-react-hooks": "4.6.2",
    "langchain": "0.2.18",
    "mocha": "10.7.3",
    "npm-run-all": "4.1.5",
    "react": "17.0.2",
    "react-dom": "17.0.2",
    "rimraf": "6.0.1",
    "run-script-os": "^1.1.6",
    "standard-version": "9.5.0",
    "tslib": "2.7.0",
    "typescript": "5.5.4",
    "typescript-eslint": "8.4.0",
    "use-resize-observer": "9.1.0",
    "uuid": "10.0.0",
    "yargs": "^17.7.2"
  },
  "author": {
    "name": "HPCC SystemsÂ®"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/hpcc-systems/vscode-ecl.git"
  },
  "engines": {
    "vscode": "^1.92.0"
  },
  "galleryBanner": {
    "color": "#CFB69A",
    "theme": "light"
  },
  "extensionDependencies": [
    "GordonSmith.observable-js"
  ],
  "activationEvents": [
    "onNotebook:ecl-notebook",
    "workspaceContains:*.ecl",
    "workspaceContains:*.ecllib",
    "workspaceContains:*.mod",
    "workspaceContains:*.eclnb",
    "workspaceContains:*.kel",
    "workspaceContains:*.dashy"
  ],
  "contributes": {
    "languages": [
      {
        "id": "ecl",
        "extensions": [
          "ecl",
          "mod",
          "ecllib"
        ],
        "aliases": [
          "ECL",
          "ecl"
        ],
        "configuration": "./ecl-tmLanguage/ecl.configuration.json"
      },
      {
        "id": "kel",
        "extensions": [
          "kel"
        ],
        "aliases": [
          "KEL",
          "kel"
        ],
        "configuration": "./kel.configuration.json"
      },
      {
        "id": "json",
        "extensions": [
          "dashy"
        ],
        "aliases": [
          "Dashy"
        ]
      }
    ],
    "jsonValidation": [
      {
        "fileMatch": "*.dashy",
        "url": "./dist/v2.json"
      }
    ],
    "grammars": [
      {
        "language": "ecl",
        "scopeName": "source.ecl",
        "path": "./ecl-tmLanguage/syntaxes/ecl.tmLanguage.json"
      },
      {
        "language": "kel",
        "scopeName": "source.kel",
        "path": "./syntaxes/kel.tmLanguage.json"
      },
      {
        "scopeName": "source.json.dashy",
        "path": "./syntaxes/dashy.tmLanguage.json",
        "injectTo": [
          "source.json"
        ]
      }
    ],
    "snippets": [
      {
        "language": "ecl",
        "path": "./snippets/ecl.json"
      },
      {
        "language": "kel",
        "path": "./snippets/kel.json"
      }
    ],
    "chatParticipants": [
      {
        "id": "chat.ecl",
        "fullName": "ECL",
        "name": "ecl",
        "description": "HPCC-Platform Assistant to help with ECL development",
        "isSticky": true,
        "commands": [
          {
            "name": "create",
            "description": "Create a new ECL file"
          },
          {
            "name": "docs",
            "description": "Information about the ECL language"
          }
        ]
      }
    ],
    "viewsWelcome": [],
    "commands": [
      {
        "command": "ecl.submit",
        "category": "ECL",
        "title": "%Submit%",
        "description": "%Submit ECL to HPCC Platform%",
        "icon": {
          "light": "resources/light/play.svg",
          "dark": "resources/dark/play.svg"
        },
        "enablement": "ecl.connected"
      },
      {
        "command": "hpccPlatform.resubmitWU",
        "category": "ECL",
        "title": "%Resubmit%",
        "description": "%Resubmit ECL to HPCC Platform%",
        "icon": {
          "light": "resources/light/play.svg",
          "dark": "resources/dark/play.svg"
        },
        "enablement": "ecl.connected"
      },
      {
        "command": "ecl.submitNoArchive",
        "category": "ECL",
        "title": "%Submit (No Archive)%",
        "description": "%Submit Raw ECL to HPCC Platform%",
        "icon": {
          "light": "resources/light/play.svg",
          "dark": "resources/dark/play.svg"
        },
        "enablement": "ecl.connected"
      },
      {
        "command": "ecl.compile",
        "category": "ECL",
        "title": "%Compile%",
        "description": "%Compile ECL on the HPCC Platform%",
        "icon": {
          "light": "resources/light/build.svg",
          "dark": "resources/dark/build.svg"
        },
        "enablement": "ecl.connected"
      },
      {
        "command": "ecl.checkSyntax",
        "category": "ECL",
        "title": "%Syntax Check%",
        "description": "%Save + check syntax of current file%",
        "icon": {
          "light": "resources/light/check.svg",
          "dark": "resources/dark/check.svg"
        }
      },
      {
        "command": "ecl.checkSyntaxAll",
        "category": "ECL",
        "title": "%Syntax Check all files%",
        "description": "%Save All + check syntax of all files%"
      },
      {
        "command": "ecl.checkSyntaxClear",
        "category": "ECL",
        "title": "%Syntax Clear%",
        "description": "%Clear all previously reported ECL Syntax Check results%"
      },
      {
        "command": "ecl.sign",
        "category": "ECL",
        "title": "%Sign ECL%",
        "description": "%Digitally sign ECL file%",
        "enablement": "ecl.connected"
      },
      {
        "command": "ecl.verify",
        "category": "ECL",
        "title": "%Verify ECL Signature%",
        "description": "%Verify ECL Digital Signature%",
        "enablement": "ecl.connected"
      },
      {
        "command": "ecl.importModFile",
        "category": "ECL",
        "title": "%Import '.mod' file%",
        "description": "%Import ECL '.mod' file%"
      },
      {
        "command": "ecl.showLanguageReference",
        "category": "ECL",
        "title": "%Language Reference Website%",
        "description": "%Opens the ECL language reference website in external browser%"
      },
      {
        "command": "ecl.showStandardLibraryReference",
        "category": "ECL",
        "title": "%Standard Library Website%",
        "description": "%Opens the ECL Standard Library website in external browser%"
      },
      {
        "command": "ecl.searchTerm",
        "category": "ECL",
        "title": "%Language Reference Lookup%",
        "description": "%For the currently selected text, search the online ECL language reference%"
      },
      {
        "command": "ecl.showWUDetails",
        "category": "ECL",
        "title": "%Open ECL Watch%",
        "description": "%Opens ECL Watch Page%",
        "enablement": "ecl.connected"
      },
      {
        "command": "ecl.openECLWatchExternal",
        "category": "ECL",
        "title": "%Launch ECL Watch%",
        "description": "%Opens ECL Watch Page in an external browser%",
        "icon": {
          "light": "resources/light/globe.svg",
          "dark": "resources/dark/globe.svg"
        },
        "enablement": "ecl.connected"
      },
      {
        "command": "ecl.selectCTVersion",
        "category": "ECL",
        "title": "%Select Client Tools Version%",
        "description": "%Select Client Tools Version from available options%"
      },
      {
        "command": "ecl.createTerminal",
        "category": "ECL",
        "title": "%Terminal%",
        "description": "%Opens ECL Client Tools Terminal Session%"
      },
      {
        "command": "ecl.insertRecordDef",
        "category": "ECL",
        "title": "%Insert Record Definition%",
        "description": "%Insert logical file record definition%"
      },
      {
        "command": "ecl.copyAsEclID",
        "category": "ECL",
        "title": "%Copy as ECL ID%",
        "description": "%Copy path as Qualified ECL ID%"
      },
      {
        "command": "hpccPlatform.copyWUID",
        "category": "ECL",
        "title": "%Copy WUID%"
      },
      {
        "command": "hpccPlatform.browseWUDetails",
        "category": "ECL",
        "title": "%Browse Details%"
      },
      {
        "command": "hpccPlatform.openResults",
        "category": "ECL",
        "title": "%Open Results%"
      },
      {
        "command": "hpccPlatform.openResult",
        "category": "ECL",
        "title": "%Open Result%"
      },
      {
        "command": "hpccPlatform.browseResults",
        "category": "ECL",
        "title": "%Browse Results%"
      },
      {
        "command": "hpccPlatform.browseMetrics",
        "category": "ECL",
        "title": "%Browse Metrics%"
      },
      {
        "command": "hpccPlatform.openECL",
        "category": "ECL",
        "title": "%Open ECL%"
      },
      {
        "command": "hpccPlatform.saveWUResults",
        "category": "ECL",
        "title": "%Save Results%"
      },
      {
        "command": "ecl.openResult",
        "category": "ECL",
        "title": "%Open Result%"
      },
      {
        "command": "ecl.browseResult",
        "category": "ECL",
        "title": "%Browse Result%"
      },
      {
        "command": "ecl.saveResultAs",
        "category": "ECL",
        "title": "%Save Result%"
      },
      {
        "command": "hpccPlatform.abortWU",
        "category": "ECL",
        "title": "%Abort Workunit%",
        "enablement": "viewItem =~ /ECLWUNode/"
      },
      {
        "command": "hpccPlatform.deleteWU",
        "category": "ECL",
        "title": "%Delete Workunit%",
        "enablement": "viewItem =~ /ECLWUNodeComplete/"
      },
      {
        "command": "hpccPlatform.protectWU",
        "category": "ECL",
        "title": "%Protect Workunit%",
        "enablement": "viewItem =~ /ECLWUNode/"
      },
      {
        "command": "hpccPlatform.unprotectWU",
        "category": "ECL",
        "title": "%Unprotect Workunit%",
        "enablement": "viewItem =~ /ECLWUNode/"
      },
      {
        "command": "hpccPlatform.setStateCompiled",
        "category": "ECL",
        "title": "%Compiled%"
      },
      {
        "command": "hpccPlatform.setStateRunning",
        "category": "ECL",
        "title": "%Running%"
      },
      {
        "command": "hpccPlatform.setStateCompleted",
        "category": "ECL",
        "title": "%Completed%"
      },
      {
        "command": "hpccPlatform.setStateFailed",
        "category": "ECL",
        "title": "%Failed%"
      },
      {
        "command": "hpccPlatform.setStateArchived",
        "category": "ECL",
        "title": "%Archived%"
      },
      {
        "command": "hpccPlatform.setStateAborting",
        "category": "ECL",
        "title": "%Aborting%"
      },
      {
        "command": "hpccPlatform.setStateAborted",
        "category": "ECL",
        "title": "%Aborted%"
      },
      {
        "command": "hpccPlatform.setStateBlocked",
        "category": "ECL",
        "title": "%Blocked%"
      },
      {
        "command": "hpccPlatform.setStateSubmitted",
        "category": "ECL",
        "title": "%Submitted%"
      },
      {
        "command": "hpccPlatform.setStateScheduled",
        "category": "ECL",
        "title": "%Scheduled%"
      },
      {
        "command": "hpccPlatform.setStateCompiling",
        "category": "ECL",
        "title": "%Compiling%"
      },
      {
        "command": "hpccPlatform.setStateWaiting",
        "category": "ECL",
        "title": "%Waiting%"
      },
      {
        "command": "hpccPlatform.moveJobUp",
        "category": "ECL",
        "title": "%Up%"
      },
      {
        "command": "hpccPlatform.moveJobDown",
        "category": "ECL",
        "title": "%Down%"
      },
      {
        "command": "hpccPlatform.moveJobBack",
        "category": "ECL",
        "title": "%Back%"
      },
      {
        "command": "hpccPlatform.moveJobFront",
        "category": "ECL",
        "title": "%Front%"
      },
      {
        "command": "hpccPlatform.userRefresh",
        "category": "ECL",
        "title": "%Refresh%",
        "description": "%Refresh Tree%",
        "icon": {
          "light": "resources/light/refresh.svg",
          "dark": "resources/dark/refresh.svg"
        },
        "enablement": "ecl.connected"
      },
      {
        "command": "hpccPlatform.eclwatch",
        "category": "ECL",
        "title": "%ECL Watch%",
        "description": "%Open ECL Watch in external browser%",
        "icon": {
          "light": "resources/light/globe.svg",
          "dark": "resources/dark/globe.svg"
        },
        "enablement": "ecl.connected"
      },
      {
        "command": "hpccPlatform.pin",
        "category": "ECL",
        "title": "%Pin launch configuration%",
        "description": "%Pin launch configuration to current document%"
      },
      {
        "command": "hpccPlatform.switch",
        "category": "ECL",
        "title": "%Switch HPCC Platform%",
        "description": "%Switch to different HPCC Platform instance%",
        "icon": {
          "light": "resources/light/server-process.svg",
          "dark": "resources/dark/server-process.svg"
        }
      },
      {
        "command": "hpccPlatform.switchTargetCluster",
        "category": "ECL",
        "title": "%Switch Target Cluster%",
        "description": "%Switch Target Cluster%",
        "enablement": "ecl.connected"
      },
      {
        "command": "hpccPlatform.myWorkunits",
        "category": "ECL",
        "title": "%My workunits%",
        "description": "%Showing \"my\" workunits%",
        "icon": {
          "light": "resources/light/person.svg",
          "dark": "resources/dark/person.svg"
        },
        "enablement": "ecl.connected"
      },
      {
        "command": "hpccPlatform.allWorkunits",
        "category": "ECL",
        "title": "%All workunits%",
        "description": "%Showing all workunits%",
        "icon": {
          "light": "resources/light/organization.svg",
          "dark": "resources/dark/organization.svg"
        },
        "enablement": "ecl.connected"
      },
      {
        "command": "hpccPlatform.showECL",
        "category": "ECL",
        "title": "%Show ECL%",
        "description": "%Showing the ECL code%",
        "icon": {
          "light": "resources/light/organization.svg",
          "dark": "resources/dark/organization.svg"
        },
        "enablement": "ecl.connected"
      },
      {
        "command": "hpccResources.bundles.refresh",
        "category": "ECL",
        "title": "%Refresh%",
        "description": "%Refresh Tree%",
        "icon": {
          "light": "resources/light/refresh.svg",
          "dark": "resources/dark/refresh.svg"
        }
      },
      {
        "command": "hpccResources.bundles.homepage",
        "category": "ECL",
        "title": "%Homepage%",
        "description": "%Bundles Homepage%",
        "icon": {
          "light": "resources/light/globe.svg",
          "dark": "resources/dark/globe.svg"
        }
      },
      {
        "command": "hpccResources.bundles.install",
        "category": "ECL",
        "title": "%Install%",
        "description": "%Install Bundle%",
        "icon": {
          "light": "resources/light/cloud-download.svg",
          "dark": "resources/dark/cloud-download.svg"
        }
      },
      {
        "command": "hpccResources.bundles.uninstall",
        "category": "ECL",
        "title": "%Uninstall%",
        "description": "%Uninstall Bundle%",
        "icon": {
          "light": "resources/light/close.svg",
          "dark": "resources/dark/close.svg"
        }
      },
      {
        "command": "hpccResources.clientTools.homepage",
        "category": "ECL",
        "title": "%Homepage%",
        "description": "%Client Tools Homepage%",
        "icon": {
          "light": "resources/light/globe.svg",
          "dark": "resources/dark/globe.svg"
        }
      },
      {
        "command": "hpccResources.clientTools.refresh",
        "category": "ECL",
        "title": "%Refresh%",
        "description": "%Refresh Tree%",
        "icon": {
          "light": "resources/light/refresh.svg",
          "dark": "resources/dark/refresh.svg"
        }
      },
      {
        "command": "hpccResources.clientTools.activate",
        "category": "ECL",
        "title": "%Activate%",
        "description": "%Activate Client Tools%",
        "icon": {
          "light": "resources/light/pass.svg",
          "dark": "resources/dark/pass.svg"
        }
      },
      {
        "command": "hpccResources.clientTools.deactivate",
        "category": "ECL",
        "title": "%Auto Detect%",
        "description": "%Auto Detect Client Tools%",
        "icon": {
          "light": "resources/light/close.svg",
          "dark": "resources/dark/close.svg"
        }
      },
      {
        "command": "hpccResources.clientTools.terminal",
        "category": "ECL",
        "title": "%Terminal%",
        "description": "%ECL Client Tools Terminal%",
        "icon": {
          "light": "resources/light/terminal.svg",
          "dark": "resources/dark/terminal.svg"
        }
      },
      {
        "command": "ecl.watch.lite.openECLWatchExternal",
        "category": "ECL",
        "title": "%ECL Watch%",
        "description": "%Open ECL Watch in external browser%",
        "icon": {
          "light": "resources/light/globe.svg",
          "dark": "resources/dark/globe.svg"
        }
      },
      {
        "command": "kel.checkSyntax",
        "category": "KEL",
        "title": "%Syntax Check%",
        "description": "%Save + check syntax of current file%"
      },
      {
        "command": "kel.generate",
        "category": "KEL",
        "title": "%Generate%",
        "description": "%Generate source from KEL file%"
      },
      {
        "command": "kel.reveal",
        "category": "KEL",
        "title": "%Reveal Generated ECL in File Explorer%",
        "description": "%Reveals Generated ECL in File Explorer%"
      },
      {
        "command": "kel.selectCTVersion",
        "category": "KEL",
        "title": "%Select Client Tools Version%",
        "description": "%Select Client Tools Version from available options%"
      },
      {
        "command": "dashy.view",
        "title": "%View Dashboard%",
        "icon": {
          "dark": "./resources/dark/dashy-view.svg",
          "light": "./resources/light/dashy-view.svg"
        }
      },
      {
        "command": "dashy.edit",
        "title": "%Edit Dashboard%",
        "icon": {
          "dark": "./resources/dark/dashy-edit.svg",
          "light": "./resources/light/dashy-edit.svg"
        }
      },
      {
        "command": "notebook.cell.public",
        "title": "%Public%",
        "icon": {
          "dark": "./resources/dark/eye.svg",
          "light": "./resources/light/eye.svg"
        }
      },
      {
        "command": "notebook.cell.private",
        "title": "%Private%",
        "icon": {
          "dark": "./resources/dark/eye-closed.svg",
          "light": "./resources/light/eye-closed.svg"
        }
      },
      {
        "command": "notebook.cell.name",
        "title": "%Result Name%",
        "icon": {
          "dark": "./resources/dark/string.svg",
          "light": "./resources/light/string.svg"
        }
      },
      {
        "command": "notebook.cell.db",
        "title": "%Database Name%",
        "icon": {
          "dark": "./resources/dark/server-process.svg",
          "light": "./resources/light/server-process.svg"
        }
      }
    ],
    "submenus": [
      {
        "id": "setState",
        "label": "%Set State%"
      },
      {
        "id": "setPriority",
        "label": "%Set Priority%"
      }
    ],
    "menus": {
      "setPriority": [
        {
          "command": "hpccPlatform.moveJobUp",
          "group": "set@01"
        },
        {
          "command": "hpccPlatform.moveJobDown",
          "group": "set@02"
        },
        {
          "command": "hpccPlatform.moveJobBack",
          "group": "set@03"
        },
        {
          "command": "hpccPlatform.moveJobFront",
          "group": "set@04"
        }
      ],
      "setState": [
        {
          "command": "hpccPlatform.setStateCompiled",
          "group": "set@01"
        },
        {
          "command": "hpccPlatform.setStateRunning",
          "group": "set@02"
        },
        {
          "command": "hpccPlatform.setStateCompleted",
          "group": "set@03"
        },
        {
          "command": "hpccPlatform.setStateFailed",
          "group": "set@04"
        },
        {
          "command": "hpccPlatform.setStateArchived",
          "group": "set@05"
        },
        {
          "command": "hpccPlatform.setStateAborting",
          "group": "set@06"
        },
        {
          "command": "hpccPlatform.setStateAborted",
          "group": "set@07"
        },
        {
          "command": "hpccPlatform.setStateBlocked",
          "group": "set@08"
        },
        {
          "command": "hpccPlatform.setStateSubmitted",
          "group": "set@09"
        },
        {
          "command": "hpccPlatform.setStateScheduled",
          "group": "set@10"
        },
        {
          "command": "hpccPlatform.setStateCompiling",
          "group": "set@11"
        },
        {
          "command": "hpccPlatform.setStateWaiting",
          "group": "set@12"
        }
      ],
      "explorer/context": [
        {
          "when": "resourceLangId == ecl && resourceExtname == .ecl",
          "command": "ecl.copyAsEclID",
          "group": "6_copypath@999"
        },
        {
          "when": "resourceLangId == json && resourceExtname == .dashy",
          "command": "dashy.view",
          "group": "navigation@998"
        },
        {
          "when": "resourceLangId == json && resourceExtname == .dashy",
          "command": "dashy.edit",
          "group": "navigation@999"
        }
      ],
      "editor/context": [
        {
          "when": "resourceLangId == ecl && resourceExtname == .ecl",
          "command": "ecl.submit",
          "group": "navigation@900"
        },
        {
          "when": "resourceLangId == ecl && resourceExtname == .ecl",
          "command": "ecl.submitNoArchive",
          "group": "navigation@900"
        },
        {
          "when": "resourceLangId == ecl && resourceExtname == .ecl",
          "command": "ecl.compile",
          "group": "navigation@910"
        },
        {
          "when": "resourceLangId == ecl && resourceExtname == .ecl",
          "command": "ecl.checkSyntax",
          "group": "navigation@920"
        },
        {
          "when": "resourceLangId == ecl && resourceExtname == .ecl",
          "command": "ecl.insertRecordDef",
          "group": "navigation@930"
        },
        {
          "when": "resourceLangId == kel && resourceExtname == .kel",
          "command": "kel.checkSyntax",
          "group": "navigation@998"
        },
        {
          "when": "resourceLangId == kel && resourceExtname == .kel",
          "command": "kel.generate",
          "group": "navigation@999"
        },
        {
          "when": "resourceLangId == json && resourceExtname == .dashy",
          "command": "dashy.view",
          "group": "navigation@998"
        },
        {
          "when": "resourceLangId == json && resourceExtname == .dashy",
          "command": "dashy.edit",
          "group": "navigation@999"
        }
      ],
      "editor/title": [
        {
          "when": "resourceLangId == json && resourceExtname == .dashy",
          "command": "dashy.view",
          "group": "navigation@998"
        },
        {
          "when": "resourceLangId == json && resourceExtname == .dashy",
          "command": "dashy.edit",
          "group": "navigation@999"
        },
        {
          "when": "resourceLangId == ecl",
          "command": "ecl.checkSyntax",
          "group": "navigation@900"
        },
        {
          "when": "resourceLangId == ecl",
          "command": "ecl.submit",
          "group": "navigation@910"
        },
        {
          "when": "resourceLangId == ecl",
          "command": "ecl.compile",
          "group": "navigation@920"
        }
      ],
      "editor/title/context": [
        {
          "when": "resourceLangId == ecl && resourceExtname == .ecl",
          "command": "ecl.copyAsEclID",
          "group": "1_cutcopypaste@999"
        }
      ],
      "view/title": [
        {
          "command": "ecl.submit",
          "when": "editorTextFocus && editorLangId == ecl",
          "group": "navigation"
        },
        {
          "command": "hpccPlatform.myWorkunits",
          "when": "view == hpccPlatform && hpccPlatform.isMyWorkunits",
          "group": "navigation@10"
        },
        {
          "command": "hpccPlatform.allWorkunits",
          "when": "view == hpccPlatform && hpccPlatform.isAllWorkunits",
          "group": "navigation@20"
        },
        {
          "command": "hpccPlatform.userRefresh",
          "when": "view == hpccPlatform",
          "group": "navigation@40"
        },
        {
          "command": "hpccPlatform.eclwatch",
          "when": "view == hpccPlatform",
          "group": "navigation@50"
        },
        {
          "command": "hpccPlatform.switch",
          "when": "view == hpccPlatform",
          "group": "navigation@60"
        },
        {
          "command": "hpccResources.bundles.homepage",
          "when": "view == hpccResources.bundles",
          "group": "navigation@10"
        },
        {
          "command": "hpccResources.bundles.refresh",
          "when": "view == hpccResources.bundles",
          "group": "navigation@20"
        },
        {
          "command": "hpccResources.clientTools.homepage",
          "when": "view == hpccResources.clientTools",
          "group": "navigation@10"
        },
        {
          "command": "hpccResources.clientTools.refresh",
          "when": "view == hpccResources.clientTools",
          "group": "navigation@20"
        },
        {
          "command": "ecl.watch.lite.openECLWatchExternal",
          "when": "view == ecl.watch.lite && ecl.watch.lite.hasWuid",
          "group": "navigation@100"
        }
      ],
      "view/item/context": [
        {
          "command": "ecl.openECLWatchExternal",
          "when": "view == hpccPlatform && viewItem =~ /^ECLWUNode/",
          "group": "inline"
        },
        {
          "command": "hpccPlatform.openECL",
          "when": "view == hpccPlatform && viewItem =~ /^ECLWUNode/",
          "group": "navigation@900"
        },
        {
          "command": "hpccPlatform.openResults",
          "when": "view == hpccPlatform && viewItem =~ /^ECLWUNode/",
          "group": "navigation@910"
        },
        {
          "command": "hpccPlatform.browseWUDetails",
          "when": "view == hpccPlatform && viewItem =~ /^ECLWUNode/",
          "group": "2browse@920"
        },
        {
          "command": "hpccPlatform.browseResults",
          "when": "view == hpccPlatform && viewItem =~ /^ECLWUNode/",
          "group": "2browse@930"
        },
        {
          "command": "hpccPlatform.browseMetrics",
          "when": "view == hpccPlatform && viewItem =~ /^ECLWUNode/",
          "group": "2browse@935"
        },
        {
          "command": "hpccPlatform.copyWUID",
          "when": "view == hpccPlatform && viewItem =~ /^ECLWUNode/",
          "group": "2copy@910"
        },
        {
          "command": "hpccPlatform.saveWUResults",
          "when": "view == hpccPlatform && viewItem =~ /^ECLWUNode/",
          "group": "2copy@920"
        },
        {
          "command": "hpccPlatform.abortWU",
          "when": "view == hpccPlatform && viewItem =~ /^ECLWUNode/",
          "group": "3action@910"
        },
        {
          "command": "hpccPlatform.resubmitWU",
          "when": "view == hpccPlatform && viewItem =~ /^ECLWUNode/",
          "group": "3action@915"
        },
        {
          "command": "hpccPlatform.deleteWU",
          "when": "view == hpccPlatform && viewItem =~ /^ECLWUNode/",
          "group": "3action@920"
        },
        {
          "when": "view == hpccPlatform && viewItem =~ /ECLWUNodeUnprotected/",
          "command": "hpccPlatform.protectWU",
          "group": "3action@930"
        },
        {
          "when": "view == hpccPlatform && viewItem =~ /ECLWUNodeProtected/",
          "command": "hpccPlatform.unprotectWU",
          "group": "3action@940"
        },
        {
          "when": "view == hpccPlatform && viewItem =~ /ECLWUNode/",
          "submenu": "setState",
          "group": "4action@900"
        },
        {
          "when": "view == hpccPlatform && viewItem =~ /ECLWUNode/",
          "submenu": "setPriority",
          "group": "5action@900"
        },
        {
          "when": "view == hpccPlatform && viewItem =~ /ECLWUNode/",
          "command": "hpccPlatform.userRefresh",
          "group": "6action@900"
        },
        {
          "command": "hpccResources.bundles.homepage",
          "when": "view == hpccResources.bundles && viewItem =~ /^BundlesItem/",
          "group": "inline"
        },
        {
          "command": "hpccResources.bundles.install",
          "when": "view == hpccResources.bundles && viewItem == BundlesItem",
          "group": "inline"
        },
        {
          "command": "hpccResources.bundles.uninstall",
          "when": "view == hpccResources.bundles && viewItem == BundlesItemInstalled",
          "group": "inline"
        },
        {
          "command": "hpccResources.clientTools.activate",
          "when": "view == hpccResources.clientTools && viewItem == ClientToolsItemDeactive",
          "group": "inline"
        },
        {
          "command": "hpccResources.clientTools.deactivate",
          "when": "view == hpccResources.clientTools && viewItem == ClientToolsItemActive",
          "group": "inline"
        },
        {
          "command": "hpccResources.clientTools.terminal",
          "when": "view == hpccResources.clientTools && viewItem =~ /^ClientToolsItem/",
          "group": "inline"
        },
        {
          "command": "ecl.openResult",
          "when": "view == hpccPlatform && viewItem == ECLResultNode",
          "group": "navigation@910"
        },
        {
          "command": "ecl.browseResult",
          "when": "view == hpccPlatform && viewItem == ECLResultNode",
          "group": "navigation@920"
        },
        {
          "command": "ecl.saveResultAs",
          "when": "view == hpccPlatform && viewItem == ECLResultNode",
          "group": "navigation@930"
        },
        {
          "command": "ecl.openECLWatchExternal",
          "when": "view == hpccPlatform && viewItem == ECLResultNode",
          "group": "inline"
        }
      ],
      "notebook/cell/title": [
        {
          "command": "notebook.cell.public",
          "when": "notebookType == ecl-notebook && cellLangId == ecl && isPublic",
          "group": "inline@3"
        },
        {
          "command": "notebook.cell.private",
          "when": "notebookType == ecl-notebook && cellLangId == ecl && isPrivate",
          "group": "inline@3"
        },
        {
          "command": "notebook.cell.name",
          "when": "notebookType == ecl-notebook && cellLangId == sql",
          "group": "inline@400"
        },
        {
          "command": "notebook.cell.db",
          "when": "notebookType == ecl-notebook && cellLangId == sql",
          "group": "inline@401"
        }
      ]
    },
    "keybindings": [
      {
        "command": "ecl.searchTerm",
        "key": "shift+f1",
        "mac": "shift+f1",
        "when": "editorTextFocus"
      },
      {
        "command": "ecl.submit",
        "key": "f5",
        "mac": "f5",
        "when": "editorTextFocus && editorLangId == ecl"
      },
      {
        "command": "ecl.submitNoArchive",
        "key": "ctrl+f5",
        "mac": "cmd+f5",
        "when": "editorTextFocus && editorLangId == ecl"
      },
      {
        "command": "ecl.checkSyntax",
        "key": "f7",
        "mac": "f7",
        "when": "editorTextFocus && editorLangId == ecl"
      },
      {
        "command": "ecl.checkSyntaxAll",
        "key": "shift+f7",
        "mac": "shift+f7"
      },
      {
        "command": "ecl.checkSyntaxClear",
        "key": "ctrl+f7",
        "mac": "cmd+f7"
      },
      {
        "command": "ecl.insertRecordDef",
        "key": "ctrl+r",
        "mac": "cmd+r",
        "when": "editorTextFocus && editorLangId == ecl"
      },
      {
        "command": "kel.checkSyntax",
        "key": "f7",
        "mac": "f7",
        "when": "editorTextFocus && editorLangId == kel"
      },
      {
        "command": "kel.generate",
        "key": "f5",
        "mac": "f5",
        "when": "editorTextFocus && editorLangId == kel"
      },
      {
        "command": "dashy.view",
        "key": "ctrl+shift+V",
        "mac": "cmd+shift+V",
        "when": "editorTextFocus"
      },
      {
        "command": "dashy.edit",
        "key": "ctrl+alt+shift+V",
        "mac": "cmd+alt+shift+V",
        "when": "editorTextFocus"
      }
    ],
    "views": {
      "hpccResources": [
        {
          "id": "hpccResources.bundles",
          "name": "%Bundles%"
        },
        {
          "id": "hpccResources.clientTools",
          "name": "%Client Tools%"
        }
      ],
      "explorer": [
        {
          "id": "hpccPlatform",
          "name": "%HPCC Platform%",
          "icon": "resources/hpcc-icon-bw.svg",
          "contextualTitle": "HPCC Platform",
          "when": "hpccPlatformActive"
        }
      ],
      "ecl-watch-lite": [
        {
          "type": "webview",
          "id": "ecl.watch.lite",
          "name": "",
          "when": "hpccPlatformActive"
        }
      ]
    },
    "viewsContainers": {
      "activitybar": [
        {
          "id": "hpccResources",
          "title": "hpcc-systems",
          "icon": "resources/hpcc-icon-bw.svg"
        }
      ],
      "panel": [
        {
          "id": "ecl-watch-lite",
          "title": "HPCC",
          "icon": "resources/hpcc-icon-bw.svg",
          "when": "resourceLangId == ecl"
        }
      ]
    },
    "customEditors": [],
    "breakpoints": [
      {
        "language": "ecl"
      }
    ],
    "configuration": {
      "type": "object",
      "title": "ECL",
      "properties": {
        "ecl.eclccArgs": {
          "type": "array",
          "scope": "resource",
          "items": {
            "type": "string"
          },
          "default": [],
          "description": "%eclcc syntax check arguments%"
        },
        "ecl.eclccSyntaxArgs": {
          "type": "array",
          "scope": "resource",
          "items": {
            "type": "string"
          },
          "default": [],
          "description": "%eclcc syntax check arguments%"
        },
        "ecl.syntaxCheckOnSave": {
          "type": "boolean",
          "scope": "resource",
          "default": true,
          "description": "%Run 'eclcc -syntax' on save%"
        },
        "ecl.syntaxCheckOnLoad": {
          "type": "boolean",
          "scope": "resource",
          "default": true,
          "description": "%Run 'eclcc -syntax' on load%"
        },
        "ecl.saveOnSyntaxCheck": {
          "type": "boolean",
          "scope": "resource",
          "default": false,
          "description": "%Save file prior to syntax check%"
        },
        "ecl.saveOnSubmit": {
          "type": "boolean",
          "scope": "resource",
          "default": false,
          "description": "%Save file prior to submission%"
        },
        "ecl.includeFolders": {
          "type": "array",
          "scope": "resource",
          "items": {
            "type": "string"
          },
          "default": [],
          "description": "%Additional folders to use when resolving IMPORT statements%"
        },
        "ecl.eclccPath": {
          "type": "string",
          "scope": "resource",
          "default": "",
          "description": "%Override eclcc auto detection%"
        },
        "ecl.eclccLogFile": {
          "type": "string",
          "scope": "resource",
          "default": "",
          "description": "%Write eclcc log file to specified file%"
        },
        "ecl.legacyMode": {
          "type": "boolean",
          "scope": "resource",
          "default": false,
          "description": "%Add '-legacy' argument to eclcc%"
        },
        "ecl.debugLogging": {
          "type": "boolean",
          "scope": "application",
          "default": false,
          "description": "%Debug level logging (requires restart)%"
        },
        "ecl.launchConfiguration": {
          "type": "string",
          "scope": "resource",
          "default": "",
          "description": "%Default launch configuration%"
        },
        "ecl.targetCluster": {
          "type": "object",
          "scope": "resource",
          "default": {},
          "description": "%Target cluster (per launch configuration)%"
        },
        "ecl.pinnedLaunchConfigurations": {
          "type": "object",
          "scope": "resource",
          "default": {},
          "description": "%Pinned launch configurations%"
        },
        "ecl.WUAutoOpen": {
          "type": "boolean",
          "scope": "resource",
          "default": false,
          "description": "%Automatically open Workunits on creation%"
        },
        "ecl.WUShowResults": {
          "type": "string",
          "scope": "resource",
          "enum": [
            "internal",
            "external",
            "disabled"
          ],
          "default": "internal",
          "description": "%Show results after submitting a workunit%"
        },
        "ecl.forceProxySupport": {
          "type": "boolean",
          "scope": "resource",
          "default": false,
          "description": "%Force global 'proxySupport' to 'fallback'%"
        },
        "ecl.pingInterval": {
          "type": "number",
          "scope": "resource",
          "default": 5,
          "description": "%Ping interval (secs, -1 to disable)%"
        },
        "dashy.libraryLocation": {
          "type": "string",
          "scope": "resource",
          "enum": [
            "latest",
            "localPath"
          ],
          "default": "latest",
          "description": "%Dashy library location (bundled, latest, localPath)%"
        },
        "dashy.localPath": {
          "type": "string",
          "scope": "resource",
          "default": "",
          "description": "%Dashy Library Path (libraryLocation === \"localPath\")%"
        },
        "kel.javaArgs": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "%Java runtime arguments (e.g. -Xmx12G)%",
          "default": []
        },
        "kel.kelPath": {
          "type": "string",
          "scope": "resource",
          "default": "",
          "description": "%Override KEL auto detection%"
        },
        "kel.syntaxCheckOnSave": {
          "type": "boolean",
          "scope": "resource",
          "default": true,
          "description": "%Check syntax on save%"
        },
        "kel.generateLocation": {
          "type": "string",
          "scope": "resource",
          "enum": [
            "Same Folder",
            "Child Folder"
          ],
          "default": "Same Folder",
          "description": "%Generated ECL location%"
        },
        "kel.generateOnSave": {
          "type": "boolean",
          "scope": "resource",
          "default": false,
          "description": "%Generate ECL on save%"
        },
        "kel.syntaxCheckOnLoad": {
          "type": "boolean",
          "scope": "resource",
          "default": true,
          "description": "%Check syntax on load%"
        },
        "kel.syntaxCheckFromGrammar": {
          "type": "boolean",
          "scope": "resource",
          "default": false,
          "description": "%Check syntax with KEL grammar (fast)%"
        }
      }
    },
    "notebooks": [
      {
        "id": "ecl-notebook",
        "type": "ecl-notebook",
        "displayName": "%ECL Notebook%",
        "selector": [
          {
            "filenamePattern": "*.eclnb"
          }
        ]
      }
    ],
    "notebookRenderer": [
      {
        "id": "ecl-notebook-wurenderer",
        "displayName": "%Workunit Renderer%",
        "entrypoint": "./dist/wuRenderer.js",
        "mimeTypes": [
          "application/hpcc.wu+json"
        ],
        "requiresMessaging": "always"
      },
      {
        "id": "ecl-notebook-ojsrenderer",
        "displayName": "%ObservableJS Renderer%",
        "entrypoint": "./dist/ojsRenderer.js",
        "mimeTypes": [
          "application/hpcc.ojs+json"
        ]
      }
    ],
    "debuggers": [
      {
        "type": "ecl",
        "label": "ECL",
        "program": "./dist/debugger.js",
        "runtime": "node",
        "configurationAttributes": {
          "launch": {
            "required": [
              "serverAddress",
              "protocol",
              "port",
              "targetCluster"
            ],
            "properties": {
              "protocol": {
                "type": "string",
                "description": "%Server protocol (http or https)%",
                "enum": [
                  "http",
                  "https"
                ],
                "default": "http"
              },
              "serverAddress": {
                "type": "string",
                "description": "%Server IP/Domain address%",
                "default": "127.0.0.1"
              },
              "port": {
                "type": "number",
                "description": "%Server port%",
                "default": 8010
              },
              "path": {
                "type": "string",
                "description": "%Server path%",
                "default": ""
              },
              "targetCluster": {
                "type": "string",
                "description": "%Target cluster%",
                "default": "hthor"
              },
              "abortSubmitOnError": {
                "type": "boolean",
                "description": "%Abort submit when errors are reported during archive generation%",
                "default": true
              },
              "rejectUnauthorized": {
                "type": "boolean",
                "description": "%Reject unauthorized calls e.g. SSL certificate errors%",
                "default": true
              },
              "eclccPath": {
                "type": "string",
                "description": "%Override eclcc auto detection%"
              },
              "eclccArgs": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "%Build flags, to be passed to the eclcc compiler%"
              },
              "eclccSyntaxArgs": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "%Syntax check arguments, to be passed to the eclcc compiler%"
              },
              "eclccLogFile": {
                "type": "string",
                "description": "%Override eclcc auto detection%"
              },
              "resultLimit": {
                "type": "number",
                "description": "%Max result limit for workunit results%",
                "default": 100
              },
              "timeoutSecs": {
                "type": "number",
                "description": "%Default timeout (secs)%",
                "default": 60
              },
              "user": {
                "type": "string",
                "description": "%User ID%",
                "default": ""
              },
              "password": {
                "type": "string",
                "description": "%User password%",
                "default": ""
              }
            }
          }
        },
        "initialConfigurations": [
          {
            "name": "localhost",
            "type": "ecl",
            "request": "launch",
            "protocol": "http",
            "serverAddress": "localhost",
            "port": 8010,
            "path": "",
            "targetCluster": "hthor",
            "abortSubmitOnError": true,
            "rejectUnauthorized": true,
            "resultLimit": 100,
            "timeoutSecs": 60,
            "user": "vscode_user",
            "password": ""
          }
        ],
        "configurationSnippets": [
          {
            "label": "ECL:  localhost (http)",
            "description": "%A new configuration to submit ECL to localhost, hthor%",
            "body": {
              "name": "localhost",
              "type": "ecl",
              "request": "launch",
              "protocol": "http",
              "serverAddress": "localhost",
              "port": 8010,
              "path": "",
              "targetCluster": "hthor",
              "abortSubmitOnError": true,
              "rejectUnauthorized": true,
              "resultLimit": 100,
              "timeoutSecs": 60,
              "user": "vscode_user",
              "password": ""
            }
          },
          {
            "label": "ECL:  localhost (https)",
            "description": "%A new configuration to submit ECL to localhost, hthor%",
            "body": {
              "name": "localhost (https)",
              "type": "ecl",
              "request": "launch",
              "protocol": "https",
              "serverAddress": "localhost",
              "port": 18010,
              "path": "",
              "targetCluster": "hthor",
              "abortSubmitOnError": true,
              "rejectUnauthorized": false,
              "resultLimit": 100,
              "timeoutSecs": 60,
              "user": "vscode_user",
              "password": ""
            }
          }
        ]
      }
    ]
  }
}
